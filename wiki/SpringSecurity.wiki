#summary spring security
 * Security
{{{
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:security="http://www.springframework.org/schema/security"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.0.xsd">
...
</beans>
}}}
 * Or:
{{{
<beans:beans xmlns="http://www.springframework.org/schema/security"
xmlns:beans="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.0.xsd">
...
</beans:beans>
}}}
 * [http://www.springsource.com/products/sts SpringSource Tool Suite ]
 * NOTE: elements here lifted from Ben Alex's book on spring security.
 * [http://apr.apache.org/versioning.html Apache Portable Runtime Project versioning guidelines] _MAJOR.MINOR.PATCH_
  * Versions are denoted using a standard triplet of integers: MAJOR.MINOR.PATCH. 
  * The basic intent is that MAJOR versions are incompatible, large-scale upgrades of the API. 
  * MINOR versions retain source and binary compatibility with older minor versions, and changes in the PATCH level are perfectly compatible, forwards and backwards.
 * 2007 - Acegi Security is rebranded as *Spring Security*
 * Three main areas of interest in respect of authorization:
  # authorizing web requests
  # authorizing whether methods can be invoked
  # authorizing access to individual domain object instances
 * [http://jcaptcha.sourceforge.net/ JCaptcha] integration for human user detection
 * Spring Security currently supports authentication integration with:
  * HTTP BASIC authentication headers (an IEFT RFC-based standard)
  * HTTP Digest authentication headers (an IEFT RFC-based standard)
  * HTTP X.509 client certificate exchange (an IEFT RFC-based standard)
  * LDAP
  * Form-based authentication (for simple user interface needs)
  * OpenID authentication
  * Authentication based on pre-established request headers (such as Computer Associates Siteminder)
  * JA-SIG Central Authentication Service (otherwise known as CAS, which is a popular open source single sign on system)
  * Transparent authentication context propagation for Remote Method Invocation (RMI) and HttpInvoker (a Spring remoting protocol)
  * Automatic "remember-me" authentication (so you can tick a box to avoid re-authentication for a
predetermined period of time)
  * Anonymous authentication (allowing every call to automatically assume a particular security identity)
  * Run-as authentication (which is useful if one call should proceed with a different security identity)
  * Java Authentication and Authorization Service (JAAS)
  * JEE container autentication (so you can still use Container Managed Authentication if desired)
  * Kerberos
  * Third Party Providers
   * Java Open Source Single Sign On (JOSSO), AppFuse, AndroMDA, Mule ESB, Direct Web Request (DWR), Grails,  Tapestry, JTrac, Jasypt, Roller, Elastic Path, Atlassian Crowd
 * *Authorization* refers to the process of deciding whether a principal is allowed to perform an action within your application.
 * *Authentication* is the process of establishing a principal is who they claim to be (a “principal” generally means a user, device or some other system which can perform an action in your application).
 * [http://s3.amazonaws.com/dist.springframework.org/release/SEC/spring-security-3.0.5.RELEASE.zip Download Spring Security 3.0.5.RELEASE]
 * Spring Security works with webapps, but also with:
  * Batch jobs
  * Rich clients
  * Integration tests
 * [http://www.viddler.com/explore/oredev/videos/22/ Flash Video - Ben Alex of SpringSource (has Swedish Fiance)] - ben.alex@springsource.com
 * Spring Security used to be Acegi Security - became Spring Security in 2008
 * Spring Security capabilities:
  * Authentication
  * Web URL authorization
  * Method invocation authorization
  * Channel security
  * Human user detection
  * Domain instance based security (ACLs - Access Control Lists - e.g. can only see specific domain patient information)
  * WS-Security (via Spring Web Services)
  * Flow Authorization (via Spring Web Flow)
 * What Spring Security *IS NOT*:
  * [http://en.wikipedia.org/wiki/Firewall_(computing) Firewall]
  * [http://en.wikipedia.org/wiki/Proxy_server Proxy Server]
  * [http://en.wikipedia.org/wiki/Intrusion_detection_system IDS]
  * Operating System Security
  * JVM (sandbox) Security