#summary Most basic/simplest Spring and JPA application.

= Description =
 * The idea here is to put together the instructions for generating a very basic Spring and JPA application.
== Requirements ==
 * Single database (embedded)
 * Single Repository
 * Maven-based application
=== Pieces ===
 * Libraries
 * Domain (annotated)
 * Repository (annotated)
 * Spring configuration
 * persistence.xml
 * log4j.xml (for logging)
 * Test
=== Domain ===
 * Log
  * id
  * message
  * date (when it occurred)
  * author (not unique)
=== Libraries ===
{{{
}}}
=== Domain ===
 * LogMessageRepository
{{{
package com.jgk.springrecipes.orm.springjpaminimalist.repository;

import java.util.List;

import com.jgk.springrecipes.orm.springjpaminimalist.domain.LogMessage;

public interface LogMessageRepository {
	List<LogMessage> findAll();
	void save(LogMessage lm);
}

}}}
 * JpaLogMessageRepository
{{{
package com.jgk.springrecipes.orm.springjpaminimalist.repository;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.jgk.springrecipes.orm.springjpaminimalist.domain.LogMessage;

@Repository
public class JpaLogMessageRepository implements LogMessageRepository {
	private EntityManager entityManager;

	@PersistenceContext
	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

	public List<LogMessage> findAll() {
		return entityManager.createQuery("select p from LogMessage p",
				LogMessage.class).getResultList();
	}

	@Override
	@Transactional
	public void save(LogMessage logMessage) {
		entityManager.persist(logMessage);
	}
}

}}}
 * LogMessage
{{{
package com.jgk.springrecipes.orm.springjpaminimalist.domain;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "LOG_MSG")
public class LogMessage {

	@Override
	public String toString() {
		return "LogMessage [id=" + id + ", message=" + message + ", author="
				+ author + ", date=" + date + "]";
	}

	private Long id;
	private String message, author;
	private Date date;

	@Id
	@GeneratedValue
	@Column(name = "id")
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public static LogMessage createLogMessage(String message, String author) {
		LogMessage logMessage = new LogMessage();
		logMessage.setMessage(message);
		logMessage.setAuthor(author);
		logMessage.setDate(new Date());
		return logMessage;
	}

}

}}}
=== persistence.xml ===
 * This file needs to end up on your classpath at location {{{ /META-INF/persistence.xml }}}
{{{
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="1.0"
      xmlns="http://java.sun.com/xml/ns/persistence"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
      http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd">
  <persistence-unit name="logMessagePersistenceUnit"/>
</persistence>
}}}
=== Spring configuration ===
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<bean id="logMessageRepository" class="com.jgk.springrecipes.orm.springjpaminimalist.repository.JpaLogMessageRepository" />

	<!-- Instructs the container to look for beans with @Transactional and decorate them -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Enable annotation-config, needed for @PersistenceContext annotations -->
	<context:annotation-config />
		
</beans>		
}}}
=== log4j ===
 * log4j.xml
{{{
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
  <appender name="console" class="org.apache.log4j.ConsoleAppender"> 
    <param name="Target" value="System.out"/> 
    <layout class="org.apache.log4j.PatternLayout"> 
      <param name="ConversionPattern" value="%-5p %c{1} - %m%n"/> 
    </layout> 
  </appender>
   
  <root> 
    <priority value ="error" /> 
    <appender-ref ref="console" /> 
  </root>
  
</log4j:configuration>
}}}