#summary Spring Hades

 * [http://redmine.synyx.org/projects/hades Hades home page]

=== Dependency ===
{{{
	<dependency>
	     <groupId>org.synyx.hades</groupId>
	     <artifactId>org.synyx.hades</artifactId>
	     <version>2.0.2.RELEASE</version>
	     <exclusions>
	     	<exclusion>
	     		<groupId>org.springframework</groupId>
	     		<artifactId>org.springframework.orm</artifactId>
	     	</exclusion>
	     </exclusions>
	 </dependency>  

}}}
=== Configuration Files ===
==== {{{ MyHadesTest-config.xml }}} ====
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				              http://www.springframework.org/schema/context
				              http://www.springframework.org/schema/context/spring-context-3.0.xsd"							
              >

	<import resource="classpath:/com/jgk/springrecipes/jpa/hades/my-app-config.xml"/>

</beans>

}}}
==== {{{ my-app-config.xml }}} ====
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:hades="http://schemas.synyx.org/hades"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				              http://www.springframework.org/schema/context
				              http://www.springframework.org/schema/context/spring-context-3.0.xsd
				              http://schemas.synyx.org/hades http://schemas.synyx.org/hades/hades.xsd
				              "							
              >

	<import resource="classpath:/com/jgk/springrecipes/jpa/hades/infrastructure-config.xml"/>
	
	<hades:dao-config base-package="com.jgk.springrecipes.jpa.hades.dao" />
</beans>

}}}
==== {{{ infrastructure-config.xml }}} ====
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:hades="http://schemas.synyx.org/hades" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				              http://www.springframework.org/schema/context
				              http://www.springframework.org/schema/context/spring-context-3.0.xsd
							http://www.springframework.org/schema/jdbc
							http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
				              http://schemas.synyx.org/hades http://schemas.synyx.org/hades/hades.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
				              ">

	<context:annotation-config/>
	<context:component-scan base-package="com.jgk.springrecipes.jpa.hades"/>
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
			</props>
		</property>
		
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>	
   <jdbc:embedded-database id="dataSource" type="HSQL"/>
	
</beans>

}}}
=== {{{ src/main/resources/META-INF/persistence.xml }}} ===
{{{
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">
   <persistence-unit name="loveHades">
   </persistence-unit>
</persistence>
}}}
=== User ===
{{{
package com.jgk.springrecipes.jpa.hades.domain;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.Table;


@Entity
@Table(name="USERS")
@NamedQuery(name="User.findByLastname",query="from User u where u.lastname = ?1")
public class User {
	@Id
	@GeneratedValue(strategy=GenerationType.TABLE)
	private Long id;
	private String username;
	private String lastname;
	private Integer age;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getLastname() {
		return lastname;
	}
	public void setLastname(String lastname) {
		this.lastname = lastname;
	}
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "User [id=" + id + ", username=" + username + ", lastname="
				+ lastname + ", age=" + age + "]";
	}
	public static User createUser(String username, String lastname, Integer age) {
		User user = new User();
		user.setUsername(username);
		user.setLastname(lastname);
		user.setAge(age);
		return user;
	}


}

}}}
=== {{{UserDao}}} ===
{{{
@Repository
public interface UserDao extends GenericDao<User, Long> {
	// Will trigger the NamedQuery due to a naming convention
	List<User> findByLastname(String lastname);
	 // Will create a query from the methodname
	 // from User u where u.username = ?
	 User findByUsername(String username);

	 // Uses query annotated to the finder method in case you
	// don't want to pollute entity with query info
	@Query("from User u where u.age > ?1")
	List<User> findByAgeGreaterThan(int age);
	
	List<User> findByAgeLessThan(int age);
	
	List<User> findByAgeGreaterThanOrderByAgeDesc(int age);

}

}}}