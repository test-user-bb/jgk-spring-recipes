#summary AOP for Spring

== [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html Spring AOP] ==
=== Define AOP keywords ===
 * Aspect - a modularization of a concern that cuts across multiple classes.
 * Advice - action taken by an aspect at a particular join point.
 * Pointcut - a predicate that matches join points.
 * Joinpoint - a point during the execution of a program, such as the execution of a method or the handling of an exception.
=== Write basic pointcuts using ===
 * {{{execution()}}}
 * {{{*}}}
 * {{{..}}}
 * {{{+}}}
=== Identify which classes/methods match a provided pointcut ===
=== List the five Advice types ===
 * {{{@Before}}} - Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).
 * {{{@After}}} - Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).
 * {{{@AfterReturning}}} - Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.
 * {{{@AfterThrowing}}} - Advice to be executed if a method exits by throwing an exception.
 * {{{@Around}}} - Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.
=== Write an Advice ===
=== Identify which Advice types can accomplish a task
=== Identify which Advice type is preferred when multiple can be used ===
=== AOP: Configuration 2 questions ===
==== State the XML configuration required to enable scanning for @Aspect ====
==== Use code to completely configure aspects in XML ====
=== AOP: Proxies 2 questions ===
==== Identify where proxies are created in the Spring lifecycle ====
==== Know proxies share interface with object they wrap ====
==== List limitations of Spring AOP when compared with AspectJ ====