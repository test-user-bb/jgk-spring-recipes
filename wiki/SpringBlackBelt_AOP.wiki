#summary AOP for Spring

== [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html Spring AOP] ==
=== Define AOP keywords ===
 * Aspect - a modularization of a concern that cuts across multiple classes.
 * Advice - action taken by an aspect at a particular join point.
 * Pointcut - a predicate that matches join points.
 * Joinpoint - a point during the execution of a program, such as the execution of a method or the handling of an exception.
=== Write basic pointcuts using ===
 * {{{execution()}}}
 * {{{*}}}
 * {{{..}}}
 * {{{+}}}
=== Identify which classes/methods match a provided pointcut ===
=== List the five Advice types ===
 * {{{@Before}}} - Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).
 * {{{@After}}}
 * {{{@AfterReturning}}}
 * {{{@AfterThrowing}}}
 * {{{@Around}}}
=== Write an Advice ===
=== Identify which Advice types can accomplish a task
=== Identify which Advice type is preferred when multiple can be used ===
=== AOP: Configuration 2 questions ===
==== State the XML configuration required to enable scanning for @Aspect ====
==== Use code to completely configure aspects in XML ====
=== AOP: Proxies 2 questions ===
==== Identify where proxies are created in the Spring lifecycle ====
==== Know proxies share interface with object they wrap ====
==== List limitations of Spring AOP when compared with AspectJ ====