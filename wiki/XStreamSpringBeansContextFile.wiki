#summary One-sentence summary of this page.

= Introduction =
 * uses XStream to walk through and dump all the spring beans in a configuration file.
  * [http://xstream.codehaus.org/converter-tutorial.html xstream converters]
<pre>
package com.jgk.springrecipes.util.unittest.support;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.gs.util.unittest.support.MySpringBeanXStreamTest.ConstructorArg;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.ConstructorArgConverter;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.Ref;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.RefConverter;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.SpringBean;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.SpringBeanConverter;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.SpringBeanProperty;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.SpringBeanPropertyConverter;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.SpringBeans;
import com.gs.util.unittest.support.MySpringBeanXStreamTest.SpringBeansConverter;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;

public class SpringBeansFileExaminer {
    @Test
    public void testFromSpringFile() {
        File file = new File("src/main/resources/spring-beans-core.xml");
        Assert.assertTrue(file.exists());
        XStream xstream = new XStream();
        xstream.alias("bean", SpringBean.class);
        xstream.alias("beans", SpringBeans.class);
        xstream.alias("constructorArg", ConstructorArg.class);
        xstream.alias("constructor-arg", ConstructorArg.class);
        xstream.addImplicitCollection(SpringBean.class, "constructorArgs");
        xstream.addImplicitCollection(SpringBean.class, "properties");
        xstream.useAttributeFor(SpringBean.class, "id");
        xstream.useAttributeFor(SpringBean.class, "clazz");
        xstream.aliasAttribute("clazz", "class");
        xstream.registerConverter(new RefConverter());
        xstream.registerConverter(new SpringBeanConverter());
        xstream.registerConverter(new SpringBeanPropertyConverter());
        xstream.registerConverter(new ConstructorArgConverter());
        xstream.registerConverter(new SpringBeansConverter());
        BufferedReader br = null;
        try {
            SpringBeans sb = (SpringBeans) xstream.fromXML(new BufferedReader(
                    new FileReader(file)));
            Collections.sort(sb.beans);
            int count = 0;
            for (SpringBean springBean : sb.beans) {
                count++;
                System.out.printf("%3d. %s, %s, %s\n", count, springBean.id,
                        springBean.clazz, springBean.dependsOn);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }

    @Ignore
    @Test
    public void testNow() {
        SpringBean springBean = new SpringBean("someBeanId",
                "com.some.classname.HEREEE", "noscope", "someparent");
        springBean.addConstructorArg(new ConstructorArg(new Ref(
                "someConstructorArg")));
        springBean.addConstructorArg(new ConstructorArg(new Ref(
                "anotherConstructorArg")));
        springBean.addProperty(new SpringBeanProperty("someBeanProperty"));

        XStream xstream = new XStream();
        xstream.alias("bean", SpringBean.class);
        xstream.alias("beans", SpringBeans.class);
        xstream.alias("constructorArg", ConstructorArg.class);
        xstream.alias("constructor-arg", ConstructorArg.class);
        xstream.addImplicitCollection(SpringBean.class, "constructorArgs");
        xstream.addImplicitCollection(SpringBean.class, "properties");
        xstream.useAttributeFor(SpringBean.class, "id");
        xstream.useAttributeFor(SpringBean.class, "clazz");
        xstream.aliasAttribute("clazz", "class");
        xstream.registerConverter(new RefConverter());
        xstream.registerConverter(new SpringBeanConverter());
        xstream.registerConverter(new SpringBeanPropertyConverter());
        xstream.registerConverter(new ConstructorArgConverter());
        xstream.registerConverter(new SpringBeansConverter());

        StringBuilder sb = new StringBuilder();
        sb.append("<beans>");
        sb.append("<bean class=\"freakClassHere\" id=\"Franklin\">");
        sb.append("<constructor-arg><ref bean=\"someref\"></ref></constructor-arg>");
        sb.append("<constructor-arg><ref bean=\"someOTHERref\"></ref></constructor-arg>");
        sb.append("<property>");
        sb.append("<ref bean=\"funkster\"/>");
        sb.append("</property>");
        sb.append("<property>");
        sb.append("<value>some value here</value>");
        sb.append("</property>");
        sb.append("</bean>");
        sb.append("</beans>");
        SpringBeans b = (SpringBeans) xstream.fromXML(sb.toString());
        System.out.println(xstream.toXML(b));
    }

    static public class SpringBeans {
        List<SpringBean> beans = new ArrayList<SpringBean>();

        public SpringBeans() {
        }

        public void addSpringBean(SpringBean springBean) {
            this.beans.add(springBean);
        }
    }

    /**
     * http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     * 
     * @author jkroub
     * 
     */
    static public class SpringBean implements Comparable<SpringBean> {
        public SpringBean() {
            this(null, null, null, null);
        }

        public SpringBean(String _id, String _clazz, String _scope,
                String _parent) {
            this.id = _id;
            this.clazz = _clazz;
            this.scope = _scope;
            this.parent = _parent;
        }

        public void addProperty(SpringBeanProperty springBeanProperty) {
            this.properties.add(springBeanProperty);

        }

        public void addConstructorArg(ConstructorArg constructorArg) {
            constructorArgs.add(constructorArg);
        }

        String id;
        String clazz;
        String scope;
        String parent;
        List<ConstructorArg> constructorArgs = new ArrayList<ConstructorArg>();
        List<SpringBeanProperty> properties = new ArrayList<SpringBeanProperty>();
        public String dependsOn;
        public String factoryMethod;
        public String factoryBean;
        public String lazyInit;

        @Override
        public int compareTo(SpringBean o) {
            return id.compareTo(o.id);
        }

    }

    static public class SpringBeanProperty {
        public SpringBeanProperty(Ref _ref) {
            this.ref = _ref;
        }

        public SpringBeanProperty(String _value) {
            this.value = _value;
        }

        public SpringBeanProperty() {
        }

        String name;
        Ref ref;
        String value;
    }

    static public class ConstructorArg {
        public ConstructorArg() {
            this(null);
        }

        public ConstructorArg(Ref _ref) {
            this.ref = _ref;
        }

        Ref ref;
    }

    static public class Ref {
        public Ref() {
            this(null);
        }

        public Ref(String _bean) {
            this.beanX = _bean;
        }

        private String beanX;
    }

    static class RefConverter implements Converter {
        @Override
        public boolean canConvert(Class type) {
            boolean result = Ref.class.equals(type);
            return result;
        }

        @Override
        /** produce xml */
        public void marshal(Object source, HierarchicalStreamWriter writer,
                MarshallingContext context) {
            Ref ref = (Ref) source;
        }

        @Override
        public Object unmarshal(HierarchicalStreamReader reader,
                UnmarshallingContext context) {
            Ref b = new Ref();
            b.beanX = reader.getAttribute("bean");
            return b;
        }
    }

    static class ConstructorArgConverter implements Converter {
        @Override
        public boolean canConvert(Class type) {
            boolean result = ConstructorArg.class.equals(type);
            return result;
        }

        @Override
        /** produce xml */
        public void marshal(Object source, HierarchicalStreamWriter writer,
                MarshallingContext context) {
            ConstructorArg constructorArg = (ConstructorArg) source;
            if (constructorArg.ref != null) {
                writer.startNode("ref");
                if (constructorArg.ref.beanX != null) {
                    writer.addAttribute("bean", constructorArg.ref.beanX);
                }
                writer.endNode();
            }
        }

        @Override
        public Object unmarshal(HierarchicalStreamReader reader,
                UnmarshallingContext context) {
            ConstructorArg b = new ConstructorArg();
            if (reader.hasMoreChildren()) {
                reader.moveDown();
                if ("ref".equals(reader.getNodeName())) {
                    b.ref = (Ref) context.convertAnother(b, Ref.class);
                }

                reader.moveUp();
            }
            return b;
        }
    }

    static class SpringBeanPropertyConverter implements Converter {
        @Override
        public boolean canConvert(Class type) {
            boolean result = SpringBeanProperty.class.equals(type);
            return result;
        }

        @Override
        /** produce xml */
        public void marshal(Object source, HierarchicalStreamWriter writer,
                MarshallingContext context) {
            SpringBeanProperty prop = (SpringBeanProperty) source;
            if (prop.name != null) {
                writer.addAttribute("name", prop.name);
            }
            if (prop.ref != null && prop.ref.beanX != null) {
                writer.startNode("ref");
                System.out.println("prop.ref:" + prop.ref);
                System.out.println("prop.ref.beanX:" + prop.ref.beanX);
                writer.addAttribute("bean", prop.ref.beanX);
                writer.endNode();
            }
            if (prop.value != null) {
                writer.startNode("value");
                writer.setValue(prop.value);
                writer.endNode();
            }
        }

        @Override
        /** from xml to object */
        public Object unmarshal(HierarchicalStreamReader reader,
                UnmarshallingContext context) {
            SpringBeanProperty b = new SpringBeanProperty();
            while (reader.hasMoreChildren()) {
                reader.moveDown();
                if ("ref".equals(reader.getNodeName())) {
                    b.ref = (Ref) context.convertAnother(b, Ref.class);
                } else if ("value".equals(reader.getNodeName())) {
                    b.value = reader.getValue();
                }
                reader.moveUp();
            }
            return b;
        }
    }

    static class SpringBeansConverter implements Converter {
        @Override
        public boolean canConvert(Class type) {
            boolean result = SpringBeans.class.equals(type);
            return result;
        }

        @Override
        /** produce xml */
        public void marshal(Object source, HierarchicalStreamWriter writer,
                MarshallingContext context) {
            SpringBeans b = (SpringBeans) source;
            for (SpringBean bean : b.beans) {
                context.convertAnother(bean);
            }
        }

        @Override
        public Object unmarshal(HierarchicalStreamReader reader,
                UnmarshallingContext context) {
            SpringBeans b = new SpringBeans();
            while (reader.hasMoreChildren()) {
                reader.moveDown();
                SpringBean springBean = (SpringBean) context.convertAnother(b,
                        SpringBean.class);
                b.addSpringBean(springBean);
                reader.moveUp();
            }
            return b;
        }
    }

    static class SpringBeanConverter implements Converter {

        @Override
        public boolean canConvert(Class type) {
            boolean result = SpringBean.class.equals(type);
            return result;
        }

        @Override
        /** produce xml */
        public void marshal(Object source, HierarchicalStreamWriter writer,
                MarshallingContext context) {
            SpringBean b = (SpringBean) source;
            // System.out.println(b);
            if (b.id != null) {
                writer.addAttribute("id", b.id);
            }
            if (b.clazz != null) {
                writer.addAttribute("class", b.clazz);
            }
            if (b.scope != null) {
                writer.addAttribute("scope", b.scope);
            }
            if (b.parent != null) {
                writer.addAttribute("parent", b.parent);
            }
            if (b.lazyInit != null) {
                writer.addAttribute("lazy-init", b.lazyInit);
            }
            if (b.dependsOn != null) {
                writer.addAttribute("depends-on", b.dependsOn);
            }
            if (b.factoryMethod != null) {
                writer.addAttribute("factory-method", b.factoryMethod);
            }
            if (b.factoryBean != null) {
                writer.addAttribute("factory-bean", b.factoryBean);
            }
            if (b.constructorArgs != null && !b.constructorArgs.isEmpty()) {
                List<ConstructorArg> c = b.constructorArgs;
                for (ConstructorArg constructorArg : c) {
                    writer.startNode("constructor-arg");
                    context.convertAnother(constructorArg);
                    writer.endNode();
                }
            }
            if (b.properties != null && !b.properties.isEmpty()) {
                List<SpringBeanProperty> c = b.properties;
                for (SpringBeanProperty prop : c) {
                    writer.startNode("property");
                    context.convertAnother(prop);
                    writer.endNode();
                }
            }
        }

        @Override
        public Object unmarshal(HierarchicalStreamReader reader,
                UnmarshallingContext context) {
            SpringBean b = new SpringBean();// _id, _clazz, _scope, _parent);
            b.id = reader.getAttribute("id");
            b.clazz = reader.getAttribute("class");
            b.scope = reader.getAttribute("scope");
            b.parent = reader.getAttribute("parent");
            b.lazyInit = reader.getAttribute("lazy-init");
            b.dependsOn = reader.getAttribute("depends-on");
            b.factoryBean = reader.getAttribute("factory-bean");
            b.factoryMethod = reader.getAttribute("factory-method");
            while (reader.hasMoreChildren()) {
                reader.moveDown();
                if ("constructor-arg".equals(reader.getNodeName())) {
                    ConstructorArg ca = (ConstructorArg) context
                            .convertAnother(b, ConstructorArg.class);

                    b.addConstructorArg(ca);
                } else if ("property".equals(reader.getNodeName())) {
                    SpringBeanProperty springBeanProperty = (SpringBeanProperty) context
                            .convertAnother(b, SpringBeanProperty.class);
                    b.addProperty(springBeanProperty);
                }
                reader.moveUp();
            }
            return b;
        }

    }
}

</pre>