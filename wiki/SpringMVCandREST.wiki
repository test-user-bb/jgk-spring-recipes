#summary Spring MVC to build RESTful web services

== REST + JAVA:  a match made in Jersey? ==
 * [http://en.wikipedia.org/wiki/JAX-RS JAX-RS] is JEE 6 standard for building RESTful applications
 * Programmatic clients - (don't worry about the browser - data to data)
 * JAX-RS Implementations:
  * [http://jersey.java.net/ Jersey] - reference implementation (RI)
  * [http://en.wikipedia.org/wiki/RESTEasy RESTEasy] - from JBoss
  * [http://en.wikipedia.org/wiki/Restlet Restlet]
  * [http://en.wikipedia.org/wiki/Apache_CXF CXF]
== JAX-RS Annotations ==
 * {{{@Path}}} specifies the relative path for a resource class.
 * {{{@GET}}}, {{{@PUT}}}, {{{@POST}}}ï¼Œ{{{@DELETE}}}, specifies the HTTP request type of a resource method.
 * {{{@Produces}}}, specifies the returned MIME media types
 * {{{@Consumes}}}, specifies the acceptable request media types.
 * {{{@PathParam}}}, {{{@QueryParam}}}, {{{@HeaderParam}}}, {{{@CookieParam}}}, {{{@MatrixParam}}}, {{{@FormParam}}}, specifies the source of the method parameter values
  * {{{@PathParam}}} comes from URL path
  * {{{@QueryParam}}} comes from URL query parameter
  * {{{@HeaderParam}}} comes from HTTP header 
  * {{{@CookieParam}}} comes from Cookie in HTTP request.
== REST General ==
 * REST = REpresentational State Transfer (Roy Fielding's term)
 * HTTP as an application protocol, not just transport
 * Emphasizes scalability
== REST ==
 * Expose resources through {{{URIs}}}
  * Model nouns, not verbs
 * Resource operations:
  * GET - read or retrieve a resource
  * PUT - update (or put) a resource
  * POST
  * DELETE
== What comes back? ==
 * Clients ask for the specific representation
  * HTML
  * XML
  * JSON
  * ...anything you can imagine (or just about)
== Value of REST ==
 * loose coupling between client and server
 * clients track state (not server - stateless)
 * MIME types provide contract for resource interaction
== More REST ==
 * REST is a *Stateless* architecture
  * so no {{{HttpSession}}} used
  * GETs can be cached on the URL
  * It is {{{statelessness}}} that makes it scalable
== Communication ==
 * Communicate to clients through
  * HTTP Headers
  * HTTP Status codes
  _defined in HTTP specification_