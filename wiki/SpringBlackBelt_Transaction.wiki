#summary Transactions in Spring

= [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html Spring Transactions] =
== Transaction 3 questions ==
=== Write XML code to configure a local transaction manager ===
 * Local transaction manager:
{{{
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource"/>
</bean>
}}}
 * Associated data source:
{{{
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  <property name="driverClassName" value="${jdbc.driverClassName}" />
  <property name="url" value="${jdbc.url}" />
  <property name="username" value="${jdbc.username}" />
  <property name="password" value="${jdbc.password}" />
</bean>
}}}
=== Write XML code to configure a JTA transaction manager ===
 * If you use JTA in a Java EE container then you use a container {{{DataSource}}}, obtained through JNDI, in conjunction with Spring's {{{JtaTransactionManager}}}.
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:jee="http://www.springframework.org/schema/jee"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jee 
     http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">

  <jee:jndi-lookup id="dataSource" jndi-name="jdbc/jpetstore"/> 

  <bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager" />
  
  <!-- other <bean/> definitions here -->

</beans>
}}}
=== Write XML code to configure transactions using AOP ===
=== Know XML to enable @Transaction ===
=== Understand how {{{TransactionTemplate}}} is used to rollback a transaction ===
=== Identify which exceptions cause a rollback by default ===
 * {{{RuntimeException}}}s
===  Understand main attributes for Transaction: ===
 * readOnly - read-only transaction can be used when your code reads but does not modify data. Read-only transactions can be a useful optimization in some cases, such as when you are using Hibernate.
 * isolation - The degree to which this transaction is isolated from the work of other transactions.
 * propagation - Typically, all code executed within a transaction scope will run in that transaction. However, you have the option of specifying the behavior in the event that a transactional method is executed when a transaction context already exists. For example, code can continue running in the existing transaction (the common case); or the existing transaction can be suspended and a new transaction created.
 * rollbackFor
 * noRollbackFor
=== State the default isolation and propagation settings ===
=== Know the difference between PROPAGATION_REQUIRED and PROPAGATIONS_REQUIRES_NEW ===
=== Know the difference between READ_COMMITTED and READ_UNCOMMITTED ===