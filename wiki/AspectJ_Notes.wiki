#summary info about AspectJ

=== Weaver ===
 * Weaver is used to:
  * weave together classes and aspects so the advice gets executed
  * inter-type declarations affect the static structure
  * weave-time declarations produce warnings and errors
 * Types of weaving models:
  * Source weaving
  * Binary weaving
  * Load-time weaving
=== {{{@AspectJ}}} syntax ===
 * available with Java 5 annotations
 * main advantage of this syntax style is that you can compile your code using a plain Java compiler
 * The disadvantage of {{{@AspectJ}}} syntax is its verbosity in expressing the same constructs and its limitations in expressing certain constructs, especially in the static crosscutting category.
 * Syntax comparison:
|| Traditional || {{{@AspectJ}}} ||
|| aspect || @Aspect ||
|| pointcut || @Pointcut ||
|| before || @Before ||
|| after || @After ||
|| around || @Around ||
 
=== Ways to use {{{@AspectJ}}} syntax ===
 * Simplest way:  use the ajc compiler instead of javac
 * Alternate 1: include binary weaving, where code compiled using javac is then woven using *ajc*
 * Alternate 2: load-time weaving (LTW), where classes are woven as theyâ€™re being loaded into the VM



 
= Introduction =
 * a language specification (new elements (pseudo-keywords) like 'aspect' - which is analogous to 'class')
 * an implementation of AOP
 * Syntax choices:
  * traditional
  * {{{@AspectJ}}}
 * Crosscutting constructs:
  * common (join point, pointcut, and aspect)
  * dynamic (advice)
  * static (inter-type declarations and weave-time declarations)
 * Wildcards ({{{*}}})
 * {{{..}}} any method parameters
 * {{{+}}} wildcard denotes subtypes.
== Pointcuts ==
 * select execution of any public method in the system:
{{{
execution(public * *.*(..))
}}}
 * same with a name given to the pointcut:
{{{
pointcut publicOperation() : execution(public * *.*(..));
}}}

=== Aspect ===
 * contains the code expressing the weaving rules for both dynamcic and static crosscutting.
 * aspectcs can have :
  * data
  * methods
  * nested classes
=== Advice ===
 * advice is the code executed at a join point selected by a pointcut.
 * advice can execute:
  * before
  * after
  * around
 * body of advice encapsulates the logic to be executed upon reaching a join point.

=== Parts of a join point ===
 * method name
 * the _this_ object
 * method arguments
  
=== Static crosscutting (VERY COOL!) ===
 * Inter-type declaration (aka _introduction_)
 * alters static structcre of :
  * classes
  * interfaces
  * aspects
 * enables adding a method or field to a class
 * enables declare a type to implement an interface.
 * The following makes weaver assign {{{AccessTracked}}} interface as parent of the {{{MessageCommunicator}}} class:
{{{
  declare parents:  MessageCommunicator implements AccessTracked;
}}}