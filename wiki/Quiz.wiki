#summary Question and answer

 * This annotation will generate an exception at deployment time if you have not injected a necessary property:
{{{
     @Required
}}}
 * How to shorten the declaration of a PropertyPlaceholderConfigurer?
{{{
	<context:property-placeholder location="classpath:myspringproperties.properties"/>
}}}
 * Main phases of spring application:
  * Initialization
  * Use
  * Destruction
 * JSR-250
  * Web-Page  http://jcp.org/en/jsr/detail?id=250
  * Create standard annotations to be used instead of XML configuration.
   * @Generated	Marks sources that have been generated
   * @Resource	Declares a reference to a resource, e.g. a database
   * @Resources	Container for multiple Resource annotations
   * @PostConstruct	Is used on methods that need to get executed after dependency injection is done to perform any initialization.
   * @PreDestroy	Is used on methods that are called before the instance is removed from the container
   * @RunAs	Defines the role of the application during execution in a Java EE container
   * @RolesAllowed	Specifies the security roles permitted to access method(s) in an application.
   * @PermitAll	Specifies that all security roles are permitted to access the annotated method, or all methods in the annotated class.
   * @DenyAll	Specifies that no security roles are allowed to invoke the specified method(s).
   * @DeclareRoles	Used to specify the security roles by the application.
 * For most namespaces you must provide these 3 things:
  * Namespace name   (xmlns:context="http://www.springframework.org/schema/context")
  * Namespace location (xsi:schemaLocation="http://www.springframework.org/schema/context")
  * Namespace xsd file (http://www.springframework.org/schema/context/spring-context-3.0.xsd)
 * What is the purpose of using xml namespaces in bean configuration files?
  * To reduce the amount of xml configuration required to wire beans together.
 * What is PropertyPlaceholderConfigurer an example of?
  * A BeanFactoryPostProcessor
 * What is Bean Factory Post Processing?
  * Applies transformations to groups of bean definitions _before_ any objects are actually created.
  * Implemented using BeanFactoryPostProcessor
 * How do you make a bean that is simply a File?
{{{
  Answer:  use constructor-arg
	 <bean id="someFile" class="java.io.File">
	    <constructor-arg value="/tmp/passwd"/>
	 </bean>
}}}
 * How do you make a bean that is simply a String?
{{{
  Answer:  use constructor-arg
	 <bean id="someString" class="java.lang.String">
	    <constructor-arg value="Jed Clampett as some string"/>
	 </bean>
}}}
 * How do you make a bean that is simply an Integer?
{{{
  Answer:  use constructor-arg
	 <bean id="someNumber" class="java.lang.Integer">
	    <constructor-arg value="543"/>
	 </bean>
}}}
 * Example of Constructor injection:
{{{
		<bean id="person" class="PersonImpl">
			<constructor-arg value="32"/>
		</bean>
}}}  
 * What is disambiguation?
  * The process of declaring Spring properties in an unambiguous manner.
 * What Types of Conversions is Spring Capable of Out of the Box?	
  * Java primitives
  * Byte arrays
  * String arrays
  * Java wrapper classes
  * Java classes
  * String
  * java.lang.Class
  * java.net.URL
  * java.io.File
  * java.util.Locale
  * java.util.Properties
  * java.util.Collection
 * Url type conversion example:
{{{ 		
  <property name="url" value="http://www.kroubalkian.com"/>  
}}}
 * String array conversion example:
{{{
     <property name="teamNames"
				  value="Blue Dolphins,Blue Dragons,Killer Bees, Pink Bonnets"/>
}}}
 * When does Spring create and wire your components together?
  * when you instantiate the ApplicationContext (or BeanFactory)
 * What is the effect of wiring for both constructor injection and setter injection? _(silly to do this)_
  * Both injections occur in the following order:
   # constructor injection
   # setter injection
 * The name of the class representing a Spring Container.
  * ApplicationContext
 * The 3 dimensions of the Spring Triangle.
  * Dependency Injection.
  * Aspect Oriented Programming.
  * Enterprise Extensions.
 * Spring uses this to generate code to wire beans together.
  * Dependency Injection.
 * The 3 techniques for wiring component together.
  * Constructor injection.
  * Setter injection.
  * Factory method injection.
 * The XML element for constructor injection.
  * constructor-arg
 * The XML element for setter injection.
  * property
 * An XML element for factory injection.
  * factory-method
 * This distinguishes a prototype.
  * One instance per getBean invocation.
 * Used to inject a reference to a named bean.
  * ref=...
 * Used to inject a scalar value.
  * value=...
 * Use this XML attribute when a constructor has been overloaded to support parameters of different types.
  * type=...
 * Use this XML attribute when a constructor has been overloaded to support multiple parameters of the same type.
  * index=...
 * The 3 types of ApplicationContexts.
  * Classpath
  * FileSystem
  * WebApplication